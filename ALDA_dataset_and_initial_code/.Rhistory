# for each level in df$groups
for(g in levels(df$group)){
# create 100 points per variable around the mean of each group
df_ell <- rbind(df_ell, cbind(as.data.frame(with(df[df$group==g,], ellipse(cor(x, y),
scale=c(sd(x),sd(y)),
centre=c(mean(x),mean(y))
)
)
),
group=g))
}
means.class=data.frame(x=0, y=0, group="0")
for (i in 1:5)
means.class=rbind(means.class, data.frame(x=mean(subset(train, Class==i)$R), y=mean(subset(train, Class==i)$G), group=as.character(i)))
means.class=means.class[-1,]
# create the ggplot with points colored by grouo
ggplot(data=means.class, aes(x=x, y=y,colour=group)) +
# draw points
geom_point(size=1.5, alpha=.6) +
# draw ellipse lines
geom_path(data=df_ell, aes(x=x, y=y,colour=group), size=1, linetype=1)
#x <- c(2,3,4, 10,12,10, 20,21,23)
x<-c(subset(train, Class==1)$R, subset(train, Class==2)$R, subset(train, Class==3)$R, subset(train, Class==4)$R, subset(train, Class==5)$R)
y <- c(subset(train, Class==1)$G, subset(train, Class==2)$G, subset(train, Class==3)$G, subset(train, Class==4)$G, subset(train, Class==5)$G)
group <- c(rep("1", times=length(subset(train, Class==1)$R)), rep("2", times=length(subset(train, Class==2)$R)), rep("3", times=length(subset(train, Class==3)$R)), rep("4", times=length(subset(train, Class==4)$R)), rep("5", times=length(subset(train, Class==5)$R)))
df <- data.frame(x,y, group)
rm(x, y, group)
# load ggplot2
library(ggplot2)
# calculating the ellipses by df$group
library(ellipse)
# create an empty dataframe
df_ell <- data.frame()
# for each level in df$groups
for(g in levels(df$group)){
# create 100 points per variable around the mean of each group
df_ell <- rbind(df_ell, cbind(as.data.frame(with(df[df$group==g,], ellipse(cor(x, y),
scale=c(sd(x),sd(y)),
centre=c(mean(x),mean(y))
)
)
),
group=g))
}
means.class=data.frame(x=0, y=0, group="0")
for (i in 1:5)
means.class=rbind(means.class, data.frame(x=mean(subset(train, Class==i)$R), y=mean(subset(train, Class==i)$G), group=as.character(i)))
means.class=means.class[-1,]
# create the ggplot with points colored by grouo
ggplot(data=means.class, aes(x=x, y=y,colour=group)) +
# draw points
geom_point(size=1.5, alpha=.6) +
# draw ellipse lines
geom_path(data=df_ell, aes(x=x, y=y,colour=group), size=1, linetype=1) +
xlab("Red")+
ylab("Green")+
ggtitle("ScatterPlot showing mean and covariance")
#x <- c(2,3,4, 10,12,10, 20,21,23)
x<-c(subset(train, Class==1)$R, subset(train, Class==2)$R, subset(train, Class==3)$R, subset(train, Class==4)$R, subset(train, Class==5)$R)
y <- c(subset(train, Class==1)$G, subset(train, Class==2)$G, subset(train, Class==3)$G, subset(train, Class==4)$G, subset(train, Class==5)$G)
group <- c(rep("1", times=length(subset(train, Class==1)$R)), rep("2", times=length(subset(train, Class==2)$R)), rep("3", times=length(subset(train, Class==3)$R)), rep("4", times=length(subset(train, Class==4)$R)), rep("5", times=length(subset(train, Class==5)$R)))
df <- data.frame(x,y, group)
rm(x, y, group)
# load ggplot2
library(ggplot2)
# calculating the ellipses by df$group
library(ellipse)
# create an empty dataframe
df_ell <- data.frame()
# for each level in df$groups
for(g in levels(df$group)){
# create 100 points per variable around the mean of each group
df_ell <- rbind(df_ell, cbind(as.data.frame(with(df[df$group==g,], ellipse(cor(x, y),
scale=c(sd(x),sd(y)),
centre=c(mean(x),mean(y))
)
)
),
group=g))
}
means.class=data.frame(x=0, y=0, group="0")
for (i in 1:5)
means.class=rbind(means.class, data.frame(x=mean(subset(train, Class==i)$R), y=mean(subset(train, Class==i)$G), group=as.character(i)))
means.class=means.class[-1,]
# create the ggplot with points colored by grouo
ggplot(data=means.class, aes(x=x, y=y,colour=group)) +
# draw points
geom_point(size=1.5, alpha=.6) +
# draw ellipse lines
geom_path(data=df_ell, aes(x=x, y=y,colour=group), size=1, linetype=1) +
xlab("Red")+
ylab("Green")+
ggtitle("ScatterPlot showing mean and covariance")+
theme(
axis.title.x=element_text(color='red', face='bold', size=14),
axis.title.y=element_text(color='green', face='bold', size=14)
)
#x <- c(2,3,4, 10,12,10, 20,21,23)
x<-c(subset(train, Class==1)$R, subset(train, Class==2)$R, subset(train, Class==3)$R, subset(train, Class==4)$R, subset(train, Class==5)$R)
y <- c(subset(train, Class==1)$G, subset(train, Class==2)$G, subset(train, Class==3)$G, subset(train, Class==4)$G, subset(train, Class==5)$G)
group <- c(rep("1", times=length(subset(train, Class==1)$R)), rep("2", times=length(subset(train, Class==2)$R)), rep("3", times=length(subset(train, Class==3)$R)), rep("4", times=length(subset(train, Class==4)$R)), rep("5", times=length(subset(train, Class==5)$R)))
df <- data.frame(x,y, group)
rm(x, y, group)
# load ggplot2
library(ggplot2)
# calculating the ellipses by df$group
library(ellipse)
# create an empty dataframe
df_ell <- data.frame()
# for each level in df$groups
for(g in levels(df$group)){
# create 100 points per variable around the mean of each group
df_ell <- rbind(df_ell, cbind(as.data.frame(with(df[df$group==g,], ellipse(cor(x, y),
scale=c(sd(x),sd(y)),
centre=c(mean(x),mean(y))
)
)
),
group=g))
}
means.class=data.frame(x=0, y=0, group="0")
for (i in 1:5)
means.class=rbind(means.class, data.frame(x=mean(subset(train, Class==i)$R), y=mean(subset(train, Class==i)$G), group=as.character(i)))
means.class=means.class[-1,]
# create the ggplot with points colored by grouo
ggplot(data=means.class, aes(x=x, y=y,colour=group)) +
# draw points
geom_point(size=1.5, alpha=.6) +
# draw ellipse lines
geom_path(data=df_ell, aes(x=x, y=y,colour=group), size=1, linetype=1) +
xlab("Red")+
ylab("Green")+
ggtitle("ScatterPlot showing mean and covariance")+
theme(
axis.title.x=element_text(face='bold', size=14),
axis.title.y=element_text(face='bold', size=14)
)
#x <- c(2,3,4, 10,12,10, 20,21,23)
x<-c(subset(train, Class==1)$R, subset(train, Class==2)$R, subset(train, Class==3)$R, subset(train, Class==4)$R, subset(train, Class==5)$R)
y <- c(subset(train, Class==1)$G, subset(train, Class==2)$G, subset(train, Class==3)$G, subset(train, Class==4)$G, subset(train, Class==5)$G)
group <- c(rep("1", times=length(subset(train, Class==1)$R)), rep("2", times=length(subset(train, Class==2)$R)), rep("3", times=length(subset(train, Class==3)$R)), rep("4", times=length(subset(train, Class==4)$R)), rep("5", times=length(subset(train, Class==5)$R)))
df <- data.frame(x,y, group)
rm(x, y, group)
# load ggplot2
library(ggplot2)
# calculating the ellipses by df$group
library(ellipse)
# create an empty dataframe
df_ell <- data.frame()
# for each level in df$groups
for(g in levels(df$group)){
# create 100 points per variable around the mean of each group
df_ell <- rbind(df_ell, cbind(as.data.frame(with(df[df$group==g,], ellipse(cor(x, y),
scale=c(sd(x),sd(y)),
centre=c(mean(x),mean(y))
)
)
),
group=g))
}
means.class=data.frame(x=0, y=0, group="0")
for (i in 1:5)
means.class=rbind(means.class, data.frame(x=mean(subset(train, Class==i)$R), y=mean(subset(train, Class==i)$G), group=as.character(i)))
means.class=means.class[-1,]
# create the ggplot with points colored by grouo
ggplot(data=means.class, aes(x=x, y=y,colour=group)) +
# draw points
geom_point(size=1.5, alpha=.6) +
# draw ellipse lines
geom_path(data=df_ell, aes(x=x, y=y,colour=group), size=1, linetype=1) +
xlab("Red")+
ylab("Green")+
ggtitle("ScatterPlot showing mean and covariance")+
theme(
plot.tile=element_text(face='bold', size=16),
axis.title.x=element_text(face='bold', size=14),
axis.title.y=element_text(face='bold', size=14)
)
#x <- c(2,3,4, 10,12,10, 20,21,23)
x<-c(subset(train, Class==1)$R, subset(train, Class==2)$R, subset(train, Class==3)$R, subset(train, Class==4)$R, subset(train, Class==5)$R)
y <- c(subset(train, Class==1)$G, subset(train, Class==2)$G, subset(train, Class==3)$G, subset(train, Class==4)$G, subset(train, Class==5)$G)
group <- c(rep("1", times=length(subset(train, Class==1)$R)), rep("2", times=length(subset(train, Class==2)$R)), rep("3", times=length(subset(train, Class==3)$R)), rep("4", times=length(subset(train, Class==4)$R)), rep("5", times=length(subset(train, Class==5)$R)))
df <- data.frame(x,y, group)
rm(x, y, group)
# load ggplot2
library(ggplot2)
# calculating the ellipses by df$group
library(ellipse)
# create an empty dataframe
df_ell <- data.frame()
# for each level in df$groups
for(g in levels(df$group)){
# create 100 points per variable around the mean of each group
df_ell <- rbind(df_ell, cbind(as.data.frame(with(df[df$group==g,], ellipse(cor(x, y),
scale=c(sd(x),sd(y)),
centre=c(mean(x),mean(y))
)
)
),
group=g))
}
means.class=data.frame(x=0, y=0, group="0")
for (i in 1:5)
means.class=rbind(means.class, data.frame(x=mean(subset(train, Class==i)$R), y=mean(subset(train, Class==i)$G), group=as.character(i)))
means.class=means.class[-1,]
# create the ggplot with points colored by grouo
ggplot(data=means.class, aes(x=x, y=y,colour=group)) +
# draw points
geom_point(size=1.5, alpha=.6) +
# draw ellipse lines
geom_path(data=df_ell, aes(x=x, y=y,colour=group), size=1, linetype=1) +
xlab("Red")+
ylab("Green")+
ggtitle("ScatterPlot showing mean and covariance")+
theme(
plot.title=element_text(face='bold', size=16),
axis.title.x=element_text(face='bold', size=14),
axis.title.y=element_text(face='bold', size=14)
)
#x <- c(2,3,4, 10,12,10, 20,21,23)
x<-c(subset(train, Class==1)$R, subset(train, Class==2)$R, subset(train, Class==3)$R, subset(train, Class==4)$R, subset(train, Class==5)$R)
y <- c(subset(train, Class==1)$G, subset(train, Class==2)$G, subset(train, Class==3)$G, subset(train, Class==4)$G, subset(train, Class==5)$G)
class <- c(rep("1", times=length(subset(train, Class==1)$R)), rep("2", times=length(subset(train, Class==2)$R)), rep("3", times=length(subset(train, Class==3)$R)), rep("4", times=length(subset(train, Class==4)$R)), rep("5", times=length(subset(train, Class==5)$R)))
df <- data.frame(x,y, class)
rm(x, y, class)
# load ggplot2
library(ggplot2)
# calculating the ellipses by df$class
library(ellipse)
# create an empty dataframe
df_ell <- data.frame()
# for each level in df$classs
for(g in levels(df$class)){
# create 100 points per variable around the mean of each class
df_ell <- rbind(df_ell, cbind(as.data.frame(with(df[df$class==g,], ellipse(cor(x, y),
scale=c(sd(x),sd(y)),
centre=c(mean(x),mean(y))
)
)
),
class=g))
}
means.class=data.frame(x=0, y=0, class="0")
for (i in 1:5)
means.class=rbind(means.class, data.frame(x=mean(subset(train, Class==i)$R), y=mean(subset(train, Class==i)$G), class=as.character(i)))
means.class=means.class[-1,]
# create the ggplot with points colored by grouo
ggplot(data=means.class, aes(x=x, y=y,colour=class)) +
# draw points
geom_point(size=1.5, alpha=.6) +
# draw ellipse lines
geom_path(data=df_ell, aes(x=x, y=y,colour=class), size=1, linetype=1) +
xlab("Red")+
ylab("Green")+
ggtitle("ScatterPlot showing mean and covariance")+
theme(
plot.title=element_text(face='bold', size=16),
axis.title.x=element_text(face='bold', size=14),
axis.title.y=element_text(face='bold', size=14)
)
x=c(subset(train, Class==1)$R, subset(train, Class==2)$R, subset(train, Class==3)$R, subset(train, Class==4)$R, subset(train, Class==5)$R)
y= c(subset(train, Class==1)$G, subset(train, Class==2)$G, subset(train, Class==3)$G, subset(train, Class==4)$G, subset(train, Class==5)$G)
class = c(rep("1", times=length(subset(train, Class==1)$R)), rep("2", times=length(subset(train, Class==2)$R)), rep("3", times=length(subset(train, Class==3)$R)), rep("4", times=length(subset(train, Class==4)$R)), rep("5", times=length(subset(train, Class==5)$R)))
df = data.frame(x,y, class)
rm(x, y, class)
# load ggplot2
library(ggplot2)
# calculating the ellipses by df$class
library(ellipse)
# create an empty dataframe
df_ell = data.frame()
# for each level in df$classs
for(g in levels(df$class)){
# create 100 points per variable around the mean of each class
df_ell = rbind(df_ell, cbind(as.data.frame(with(df[df$class==g,], ellipse(cor(x, y), scale=c(sd(x),sd(y)), centre=c(mean(x),mean(y))))),class=g))
}
means.class=data.frame(x=0, y=0, class="0")
for (i in 1:5)
means.class=rbind(means.class, data.frame(x=mean(subset(train, Class==i)$R), y=mean(subset(train, Class==i)$G), class=as.character(i)))
means.class=means.class[-1,]
# create the ggplot with points colored by grouo
ggplot(data=means.class, aes(x=x, y=y,colour=class)) +
# draw points
geom_point(size=1.5, alpha=.6) +
# draw ellipse lines
geom_path(data=df_ell, aes(x=x, y=y,colour=class), size=1, linetype=1) +
xlab("Red")+
ylab("Green")+
ggtitle("ScatterPlot showing mean and covariance")+
theme(
plot.title=element_text(face='bold', size=16),
axis.title.x=element_text(face='bold', size=14),
axis.title.y=element_text(face='bold', size=14)
)
x=c(subset(train, Class==1)$R, subset(train, Class==2)$R, subset(train, Class==3)$R, subset(train, Class==4)$R, subset(train, Class==5)$R)
y= c(subset(train, Class==1)$G, subset(train, Class==2)$G, subset(train, Class==3)$G, subset(train, Class==4)$G, subset(train, Class==5)$G)
class = c(rep("1", times=length(subset(train, Class==1)$R)), rep("2", times=length(subset(train, Class==2)$R)), rep("3", times=length(subset(train, Class==3)$R)), rep("4", times=length(subset(train, Class==4)$R)), rep("5", times=length(subset(train, Class==5)$R)))
df = data.frame(x,y, class)
rm(x, y, class)
# load ggplot2
library(ggplot2)
# calculating the ellipses by df$class
library(ellipse)
# create an empty dataframe
df_ell = data.frame()
# for each level in df$classs
for(g in levels(df$class)){
# create 100 points per variable around the mean of each class
df_ell = rbind(df_ell, cbind(as.data.frame(with(df[df$class==g,], ellipse(cor(x, y), scale=c(sd(x),sd(y)), centre=c(mean(x),mean(y))))),class=g))
}
means.class=data.frame(x=0, y=0, class="0")
for (i in 1:5)
means.class=rbind(means.class, data.frame(x=mean(subset(train, Class==i)$R), y=mean(subset(train, Class==i)$G), class=as.character(i)))
means.class=means.class[-1,]
# create the ggplot with points colored by grouo
ggplot(data=means.class, aes(x=x, y=y,colour=class)) +
# draw points
geom_point(size=1.5, alpha=.6) +
# draw ellipse lines
geom_path(data=df_ell, aes(x=x, y=y,colour=class), size=1, linetype=1) +
xlab("Red")+
ylab("Green")+
ggtitle("ScatterPlot showing mean and covariance for training data")+
theme(
plot.title=element_text(face='bold', size=16),
axis.title.x=element_text(face='bold', size=14),
axis.title.y=element_text(face='bold', size=14)
)
source('/media/pragati/New Volume/Pragati/ALDA/hw4all/hw4all/Q2.R', echo=TRUE)
generate.plots(train)
source('/media/pragati/New Volume/Pragati/ALDA/hw4all/hw4all/Q2.R', echo=TRUE)
ggplot(data=train, aes(x=train$R, y=train$G,colour=Class)) +
# draw points
geom_point(size=1.5, alpha=.6)
ggplot(data=train, aes(x=train$R, y=train$G,colour=Class+4)) +
# draw points
geom_point(size=1.5, alpha=.6)
ggplot(data=train, aes(x=train$R, y=train$G,colour=as.character(Class))) +
# draw points
geom_point(size=1.5, alpha=.6)
class=as.character(train$Class)
ggplot(data=train, aes(x=train$R, y=train$G,colour=class)) +
# draw points
geom_point(size=1.5, alpha=.6)
Class=as.character(train$Class)
ggplot(data=train, aes(x=train$R, y=train$G,colour=Class)) +
geom_point(size=1.5, alpha=.6) +
xlab("Red")+
ylab("Green")+
ggtitle("ScatterPlot showing Red vs Green Attributes for training data")+
theme(
plot.title=element_text(face='bold', size=16),
axis.title.x=element_text(face='bold', size=14),
axis.title.y=element_text(face='bold', size=14)
)
source('~/.active-rstudio-document', echo=TRUE)
class=as.character(train$Class)
ggplot(data=train, aes(x=train$R, y=train$G,colour=class)) +
geom_point(size=1.5, alpha=.6) +
xlab("Red")+
ylab("Green")+
ggtitle("ScatterPlot showing Red vs Green Attributes for training data")+
theme(
plot.title=element_text(face='bold', size=16),
axis.title.x=element_text(face='bold', size=14),
axis.title.y=element_text(face='bold', size=14)
)
source('/media/pragati/New Volume/Pragati/ALDA/hw4all/hw4all/Q2.R', echo=TRUE)
class=as.character(train$Class)
ggplot(data=train, aes(x=train$R, y=train$G,colour=class)) +
geom_point(size=1.5, alpha=.6) +
xlab("Red")+
ylab("Green")+
ggtitle("ScatterPlot showing Red vs Green Attributes for training data")+
theme(
plot.title=element_text(face='bold', size=16),
axis.title.x=element_text(face='bold', size=14),
axis.title.y=element_text(face='bold', size=14)
)
source('/media/pragati/New Volume/Pragati/ALDA/hw4all/hw4all/Q2.R', echo=TRUE)
source('/media/pragati/New Volume/Pragati/ALDA/hw4all/hw4all/Q2.R', echo=TRUE)
prediction.data[1]
model=my.model
dataset=test[,1:3]
prediction.data=sapply(1:nrow(dataset),function(x) calc.lik(dataset[x,],model))
prediction.data[1,]
prediction.data[1]
lik.1=(as.matrix(-0.5*(row-model[[1]]$mean))%*%(solve(model[[1]]$cov))%*%t(row-model[[1]]$mean))+log(model[[1]]$prior)-(0.5*length(row)*log(2*pi))-(0.5*log(det(model[[1]]$cov)))
lik.2=(as.matrix(-0.5*(row-model[[2]]$mean))%*%(solve(model[[2]]$cov))%*%t(row-model[[2]]$mean))+log(model[[2]]$prior)-(0.5*length(row)*log(2*pi))-(0.5*log(det(model[[2]]$cov)))
lik.3=(as.matrix(-0.5*(row-model[[3]]$mean))%*%(solve(model[[3]]$cov))%*%t(row-model[[3]]$mean))+log(model[[3]]$prior)-(0.5*length(row)*log(2*pi))-(0.5*log(det(model[[3]]$cov)))
lik.4=(as.matrix(-0.5*(row-model[[4]]$mean))%*%(solve(model[[4]]$cov))%*%t(row-model[[4]]$mean))+log(model[[4]]$prior)-(0.5*length(row)*log(2*pi))-(0.5*log(det(model[[4]]$cov)))
lik.5=(as.matrix(-0.5*(row-model[[5]]$mean))%*%(solve(model[[5]]$cov))%*%t(row-model[[5]]$mean))+log(model[[5]]$prior)-(0.5*length(row)*log(2*pi))-(0.5*log(det(model[[5]]$cov)))
lik.vector=c(exp(lik.1),exp(lik.2),exp(lik.3),exp(lik.4),exp(lik.5))
row=dataset[1,]
lik.1=(as.matrix(-0.5*(row-model[[1]]$mean))%*%(solve(model[[1]]$cov))%*%t(row-model[[1]]$mean))+log(model[[1]]$prior)-(0.5*length(row)*log(2*pi))-(0.5*log(det(model[[1]]$cov)))
lik.2=(as.matrix(-0.5*(row-model[[2]]$mean))%*%(solve(model[[2]]$cov))%*%t(row-model[[2]]$mean))+log(model[[2]]$prior)-(0.5*length(row)*log(2*pi))-(0.5*log(det(model[[2]]$cov)))
lik.3=(as.matrix(-0.5*(row-model[[3]]$mean))%*%(solve(model[[3]]$cov))%*%t(row-model[[3]]$mean))+log(model[[3]]$prior)-(0.5*length(row)*log(2*pi))-(0.5*log(det(model[[3]]$cov)))
lik.4=(as.matrix(-0.5*(row-model[[4]]$mean))%*%(solve(model[[4]]$cov))%*%t(row-model[[4]]$mean))+log(model[[4]]$prior)-(0.5*length(row)*log(2*pi))-(0.5*log(det(model[[4]]$cov)))
lik.5=(as.matrix(-0.5*(row-model[[5]]$mean))%*%(solve(model[[5]]$cov))%*%t(row-model[[5]]$mean))+log(model[[5]]$prior)-(0.5*length(row)*log(2*pi))-(0.5*log(det(model[[5]]$cov)))
lik.vector=c(exp(lik.1),exp(lik.2),exp(lik.3),exp(lik.4),exp(lik.5))
lik.vector
lik.1
lik.2
lik.3
lik.4
lik.5
row
model[[1]]
model[[3]]
model[[4]]
model[[5]
]
results[[1]]
results.nb[[1]]
library(RNetCDF)
#library(FNN)
library(dbscan)
data.years=(rep(0,365))
#rm(data.years)
#Approach 1: Naive approach
for(i in seq(1,36)){
name=paste("air.2m.gauss.",i+1978,".nc", sep="")
id=open.nc(name)
data=read.nc(id)
#data.years[i]=data$air[1,1,]
data.years <- c(data.years, data$air[151,29,])
}
data.years <- data.years[366:length(data.years)]
plot(data.years, pch = 20, main="Daily Air temperatures (Jan 1, 1979- Dec 31, 2014)",ylab="Air Temperatures", xlab="Number of days, starting from Jan 1, 1979")
dat=cbind(1:length(data.years), data.years)
dists=get.knn(dat, k=2)
max.two=sapply(1:nrow(dists$nn.dist), function(x) max(dists$nn.dist[x,]))
plot(sort(max.two), main="Elbow Plot", xlab="Indices", ylab="Second Nearest Neighbour distances", type="l")
eps=5
minPts=3
res <- dbscan(as.matrix(dat),eps=eps,minPts = minPts,borderPoints = FALSE)
for(i in 1:length(res$cluster)){
res$cluster[i]=ifelse(res$cluster[i]!=0,ifelse(res$cluster[i]!=127,2,1), 0)
}
plot(dat, col=res$cluster+1, pch = 20, main=paste("Plot for Epsilon=", eps, ", minPts=", minPts, sep=""),ylab="Air Temperatures (Normalized)", xlab="Number of days, starting from Jan 1, 1979")
library(RNetCDF)
#library(FNN)
library(dbscan)
data.years=(rep(0,365))
#rm(data.years)
#Approach 1: Naive approach
for(i in seq(1,36)){
name=paste("air.2m.gauss.",i+1978,".nc", sep="")
id=open.nc(name)
data=read.nc(id)
#data.years[i]=data$air[1,1,]
data.years <- c(data.years, data$air[151,29,])
}
data.years <- data.years[366:length(data.years)]
plot(data.years, pch = 20, main="Daily Air temperatures (Jan 1, 1979- Dec 31, 2014)",ylab="Air Temperatures", xlab="Number of days, starting from Jan 1, 1979")
setwd("~/Git_Pragati/DBCAD/ALDA_dataset_and_initial_code")
library(RNetCDF)
#library(FNN)
library(dbscan)
data.years=(rep(0,365))
#rm(data.years)
#Approach 1: Naive approach
for(i in seq(1,36)){
name=paste("air.2m.gauss.",i+1978,".nc", sep="")
id=open.nc(name)
data=read.nc(id)
#data.years[i]=data$air[1,1,]
data.years <- c(data.years, data$air[151,29,])
}
data.years <- data.years[366:length(data.years)]
plot(data.years, pch = 20, main="Daily Air temperatures (Jan 1, 1979- Dec 31, 2014)",ylab="Air Temperatures", xlab="Number of days, starting from Jan 1, 1979")
dat=cbind(1:length(data.years), data.years)
dists=get.knn(dat, k=2)
max.two=sapply(1:nrow(dists$nn.dist), function(x) max(dists$nn.dist[x,]))
plot(sort(max.two), main="Elbow Plot", xlab="Indices", ylab="Second Nearest Neighbour distances", type="l")
eps=5
minPts=3
res <- dbscan(as.matrix(dat),eps=eps,minPts = minPts,borderPoints = FALSE)
for(i in 1:length(res$cluster)){
res$cluster[i]=ifelse(res$cluster[i]!=0,ifelse(res$cluster[i]!=127,2,1), 0)
}
plot(dat, col=res$cluster+1, pch = 20, main=paste("Plot for Epsilon=", eps, ", minPts=", minPts, sep=""),ylab="Air Temperatures (Normalized)", xlab="Number of days, starting from Jan 1, 1979")
res$cluster
unique(res$cluster)
library(RNetCDF)
#library(FNN)
library(dbscan)
data.years=(rep(0,365))
#rm(data.years)
#Approach 1: Naive approach
for(i in seq(1,36)){
name=paste("air.2m.gauss.",i+1978,".nc", sep="")
id=open.nc(name)
data=read.nc(id)
#data.years[i]=data$air[1,1,]
data.years <- c(data.years, data$air[151,29,])
}
data.years <- data.years[366:length(data.years)]
plot(data.years, pch = 20, main="Daily Air temperatures (Jan 1, 1979- Dec 31, 2014)",ylab="Air Temperatures", xlab="Number of days, starting from Jan 1, 1979")
dat=cbind(1:length(data.years), data.years)
dists=get.knn(dat, k=2)
max.two=sapply(1:nrow(dists$nn.dist), function(x) max(dists$nn.dist[x,]))
plot(sort(max.two), main="Elbow Plot", xlab="Indices", ylab="Second Nearest Neighbour distances", type="l")
eps=5
minPts=3
res <- dbscan(as.matrix(dat),eps=eps,minPts = minPts,borderPoints = FALSE)
for(i in 1:length(res$cluster)){
res$cluster[i]=ifelse(res$cluster[i]!=0,2,0)
}
plot(dat, col=res$cluster+1, pch = 20, main=paste("Plot for Epsilon=", eps, ", minPts=", minPts, sep=""),ylab="Air Temperatures (Normalized)", xlab="Number of days, starting from Jan 1, 1979")
res$cluster
q()
